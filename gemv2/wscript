# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

# def options(opt):
#     pass

def configure(conf):
    # check for the boost geometry main header
    conf.check(mandatory=True, header_name='boost/geometry.hpp', use='BOOST_GEOMETRY')

def build(bld):
    module = bld.create_ns3_module('gemv2', ['core', 'propagation'])
    module.source = [
        'model/gemv2-bounding-boxes.cc',
        'model/gemv2-building.cc',
        'model/gemv2-environment.cc',
        'model/gemv2-foliage.cc',
        'model/gemv2-propagation-loss-model.cc',
        'model/gemv2-vehicle.cc',
        'helper/gemv2-helper.cc',
        ]

    module_test = bld.create_ns3_module_test_library('gemv2')
    module_test.source = [
        'test/gemv2-test-suite.cc',
        'test/gemv2-environment-test-suite.cc',
        'test/gemv2-geometry-test-suite.cc',
        ]

    headers = bld(features='ns3header')
    headers.module = 'gemv2'
    headers.source = [
        'model/gemv2-bounding-boxes.h',
        'model/gemv2-building.h',
        'model/gemv2-environment.h',
        'model/gemv2-foliage.h',
        'model/gemv2-geometry.h',
        'model/gemv2-propagation-loss-model.h',
        'model/gemv2-propagation-parameters.h',
        'model/gemv2-rtree-queries.h',
        'model/gemv2-types.h',
        'model/gemv2-vehicle.h',
        'helper/gemv2-helper.h',
        ]

    if bld.env.ENABLE_EXAMPLES:
        bld.recurse('examples')

    # bld.ns3_python_bindings()

